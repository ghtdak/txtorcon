txtorcon
========

overview
--------

txtorcon is a Python asynchronous controller for Tor based on Twisted,
an event-based networking system for Python. The main abstraction of
the protocol is txtorcon.TorControlProtocol which presents an
asynchronous API to speak the Tor client protocol in Python. txtorcon
also provides abstractions to track and get updates about Tor's state
and current configuration.

My main motivaation to write this was to learn more about Twisted and
Tor. I was playing with pyglet and pygame to try out some
visualization ideas and the only Python controller library was
synchronous (thread-based) so I thought I'd write my own


quick implementation overview
-----------------------------

txtorcon also provides a class to track Tor's current state -- such as
details about routers, circuits and streams -- called
txtorcon.TorState and an abstraction to the configuration values via
txtorcon.TorConfig which provides attribute-style accessors to Tor's
state (including making changes). txtorcon.TorState provides
txtorcon.Router, txtorcon.Circuit and txtorcon.Stream objects which
implement a listener interface so client code may receive updates.


dependencies
------------

 * **python-ipaddr**: google's IP address manipulation code. Could
   easily just use string if this dependency is a problem; see
   addrmap.py

 * **twisted**: I am working against Twisted 11.1.0 on Debian with Python
   2.7.2.

 * **GeoIP**: provides location information for ip addresses; you will
   want to download GeoLite City from
   [MaxMind](https://www.maxmind.com/app/geolitecity) or pay them for
   more accurracy. Or use tor-geoip, which makes this sort-of
   optional, in that we'll query Tor for the if the GeoIP databse
   doesn't have an answer but I haven't bothered removing the
   dependency yet..

 * **pydoctor**: pydoc doesn't work quite so well with zope.interface
   and the Twisted advice seems to be to use pydoctor.

 * **psutil**: optional, used in util.process_from_address and (if
   available) for guessing Tor's ip if "GETCONF process/pid" isn't
   available. This makes it a little weird for users of
   process_from_address() so might be best just to either make it a
   requirement or not...

In any case, on a Debian or Ubuntu system, this should work:

    apt-get install twisted python-ipaddr python-geoip python-pydoctor python-psutil


documentation
-------------

It is likely that you will need to read at least some of
[control-spec.txt](https://gitweb.torproject.org/torspec.git/blob/HEAD:/control-spec.txt)
from the torspec git repository so you know what's being abstracted by
this library.

There is also a directory of examples/ scripts, which have inline
documentation explaining their use. You may also use pydoc::

    pydoc txtorcon.TorControlProtocol
    pydoc txtorcon.TorState
    pydoc txtorcon.TorConfig

...for the main classes. If you're using TorState, you will also be
interested in the support classes for it::

    pydoc txtorcon.Circuit
    pydoc txtorcon.Stream
    pydoc txtorcon.Router
    pydoc txtorcon.AddrMap

There are also Zope interfaces for some things, if you wish to listen
for events for your own purposes (the best example of the use of these
being TorState itself)::

    txtorcon.ITorControlProtocol
    txtorcon.IStreamAttacher
    txtorcon.ICircuitListener
    txtorcon.IStreamListener

IStreamAttacher affects Tor's behavior, allowing one to customize how
circuits for particular streams are selected. You can build your own
circuits via ITorControlProtocol.build_circuit(). There is an example
of this called custom_stream_attacher.py which builds (or uses)
circuits exiting in the same country as the address to which the
stream is connecting (requires geoipdb).


contact information
-------------------

The main Web site for the project, with built documentation and so
forth is at https://timaq4ygg2iegci7.onion although the code itself is hosted
via git::

    torsocks git clone git://timaq4ygg2iegci7.onion/txtorcon.git

You may contact me via meejah@meejah.ca with GPG key
[128069A7](http://pgp.mit.edu:11371/pks/lookup?op=get&search=0xC2602803128069A7)
or [local](meejah.asc).
